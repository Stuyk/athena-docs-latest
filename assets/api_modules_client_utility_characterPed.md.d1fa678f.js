import{_ as e,c as t,o as a,V as d}from"./chunks/framework.be58fd72.js";const _=JSON.parse('{"title":"AthenaClient.utility.characterPed","description":"","frontmatter":{"title":"AthenaClient.utility.characterPed","outline":[1,3],"order":0},"headers":[],"relativePath":"api/modules/client_utility_characterPed.md","lastUpdated":null}'),c={name:"api/modules/client_utility_characterPed.md"},o=d('<h1 id="athenaclient-utility-characterped" tabindex="-1">AthenaClient.utility.characterPed <a class="header-anchor" href="#athenaclient-utility-characterped" aria-label="Permalink to &quot;AthenaClient.utility.characterPed&quot;">​</a></h1><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><h3 id="pedcharacter" tabindex="-1">PedCharacter <a class="header-anchor" href="#pedcharacter" aria-label="Permalink to &quot;PedCharacter&quot;">​</a></h3><p>• <code>Const</code> <strong>PedCharacter</strong>: <code>Object</code></p><p>Used to create a single instance of a character pedestrian. Mostly used for appearance editing and such. Do not use it for anything else.</p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>apply</code></td><td style="text-align:left;">(<code>_appearance</code>: <code>Appearance</code>, <code>forceSameShoes</code>: <code>boolean</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</td></tr><tr><td style="text-align:left;"><code>create</code></td><td style="text-align:left;">(<code>isMale</code>: <code>boolean</code>, <code>_pos</code>: <code>IVector3</code>, <code>_rot</code>: <code>any</code>) =&gt; <code>Promise</code>&lt;<code>number</code>&gt;</td></tr><tr><td style="text-align:left;"><code>destroy</code></td><td style="text-align:left;">() =&gt; <code>Promise</code>&lt;<code>unknown</code>&gt;</td></tr><tr><td style="text-align:left;"><code>get</code></td><td style="text-align:left;">() =&gt; <code>number</code></td></tr><tr><td style="text-align:left;"><code>getApperance</code></td><td style="text-align:left;">() =&gt; <code>any</code></td></tr><tr><td style="text-align:left;"><code>setHidden</code></td><td style="text-align:left;">(<code>value</code>: <code>boolean</code>) =&gt; <code>void</code></td></tr></tbody></table><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/client/utility/characterPed.ts#L21" target="_blank" rel="noreferrer">client/utility/characterPed.ts:21</a></p>',9),r=[o];function l(i,n,s,h,p,u){return a(),t("div",null,r)}const f=e(c,[["render",l]]);export{_ as __pageData,f as default};
