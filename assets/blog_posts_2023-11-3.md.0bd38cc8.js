import{_ as s,c as n,o as a,V as o}from"./chunks/framework.be58fd72.js";const d=JSON.parse('{"title":"Why Create Overrides?","description":"","frontmatter":{"title":"Why Create Overrides?","order":99999},"headers":[],"relativePath":"blog/posts/2023-11-3.md","lastUpdated":1702040143000}'),e={name:"blog/posts/2023-11-3.md"},l=o(`<h1 id="why-create-overrides" tabindex="-1">Why Create Overrides? <a class="header-anchor" href="#why-create-overrides" aria-label="Permalink to &quot;Why Create Overrides?&quot;">​</a></h1><blockquote><p>Written on March 11, 2023</p></blockquote><p>Over the course of several years while writing the Athena Framework there was something developers were doing that was against the fundamentals of this framework.</p><p>That was to not change the core code base when using it.</p><p>When a developer changes the core code and they are not familiar with merge conflicts, it can become difficult to upgrade to newer versions of Athena which may include better performance, cleaner code, or simply put a better API to work with.</p><h2 id="what-did-i-try-and-why-it-didn-t-work" tabindex="-1">What did I try, and why it didn&#39;t work <a class="header-anchor" href="#what-did-i-try-and-why-it-didn-t-work" aria-label="Permalink to &quot;What did I try, and why it didn&#39;t work&quot;">​</a></h2><p>Let&#39;s talk about what I tried to do first while writing this framework.</p><p>In <code>V4</code> I had introduced a concept called <code>Injections</code>.</p><p>Injections were meant to be a way for developers to add small pieces of data into the core functions. The injection code itself would be added to individual functions based on a developer saying hey can I get an injection added here. Now you can understand how quickly the amount of injections being added would spiral out of control and become incredibly messy.</p><p>Injections were a pathway to spaghetti code, and awful understanding of how they work.</p><p>They were also quite limiting when I am trying to decrease limitations while using this framework.</p><h2 id="why-are-they-awful" tabindex="-1">Why are they awful? <a class="header-anchor" href="#why-are-they-awful" aria-label="Permalink to &quot;Why are they awful?&quot;">​</a></h2><p>The injections themselves were described as follows:</p><ul><li>Add functionality to the beginning of a function</li><li>Add functionality to the end of a function</li></ul><p>However, this limiting functionality would also prevent you from making any additional changes to anything that happened in between.</p><p>You were effectively writing code that would work backwards to potentially remove whatever was happening inside of that function.</p><h2 id="where-are-we-going" tabindex="-1">Where are we going? <a class="header-anchor" href="#where-are-we-going" aria-label="Permalink to &quot;Where are we going?&quot;">​</a></h2><p>Injections are removed in <code>V5</code> and have now be replaced with <code>Overrides</code> instead.</p><p>Overrides allow you to take the original function and essentially fork it in your own plugin.</p><p>This allows you to fully change the function <strong>WITHOUT EVER CHANGING CORE</strong>.</p><p>This is important because now you can write a plugin that overrides a specific function to extend it even further beyond its current capabilities.</p><h2 id="how-does-it-work" tabindex="-1">How does it work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How does it work?&quot;">​</a></h2><p>In the Athena API pathway you will find a function called <code>override</code> in almost every file. This one function will let you override any other function that is inside of that specific file.</p><p>Let&#39;s take for example the following function from <code>src/core/server/vehicle/spawn.ts</code>.</p><p>This function creates a <code>temporary vehicle</code> that can be despawned on leave if desired.</p><p>This vehicle can be accessed by anyone, and remains in the server until restart or despawn.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">temporary</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vehicleInfo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VehicleSpawnInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">deleteOnLeave</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Vehicle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Overrides</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">temporary</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Overrides</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">temporary</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deleteOnLeave</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vehicle</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rot</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">manualEngineControl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tempVehicles</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deleteOnLeave</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tuning</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyState</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">events</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vehicle-spawned</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now let&#39;s say that I want to modify this function and log all temporary vehicles that are created.</p><p>I can do this by using an <code>override</code> on the function itself.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">spawn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">override</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">temporary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vehicleInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">deleteOnLeave</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>After introducing this override, I can now add the additional logging information by modifying the original function.</p><p>I am essentially performing a <code>copy</code> and <code>paste</code> of the original logic inside of this function and then changing it.</p><p>This is done entirely through a <code>Plugin</code> at this point.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">spawn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">override</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">temporary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vehicleInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">deleteOnLeave</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ALWAYS REMOVE THE OVERRIDE AT THE TOP</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vehicle</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rot</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">manualEngineControl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tempVehicles</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deleteOnLeave</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tuning</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyState</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// This is what I wanted to add</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">A temporary vehicle with </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">vehicleInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> was created!</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Athena</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">events</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vehicle-spawned</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vehicle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>That&#39;s it! That&#39;s how I solved it.</p><p>Now when you run the main function <code>Athena.vehicle.spawn.temporary</code> it will call the <code>Override</code> function instead of the main function.</p><p>You can now override almost any function in the framework in <code>V5</code> and this lowers the time necessary to upgrade to the next version because as long as you follow the one core rule which is; do not modify core and make a plugin instead.</p><p>Then your upgrade time will be very quick.</p>`,38),p=[l];function t(c,r,i,y,F,D){return a(),n("div",null,p)}const h=s(e,[["render",t]]);export{d as __pageData,h as default};
