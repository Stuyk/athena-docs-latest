import{_ as e,c as t,o as a,V as s}from"./chunks/framework.be58fd72.js";const m=JSON.parse('{"title":"Athena.systems.plugins","description":"","frontmatter":{"title":"Athena.systems.plugins","outline":[1,3],"order":0},"headers":[],"relativePath":"api/modules/server_systems_plugins.md","lastUpdated":null}'),r={name:"api/modules/server_systems_plugins.md"},n=s('<h1 id="athena-systems-plugins" tabindex="-1">Athena.systems.plugins <a class="header-anchor" href="#athena-systems-plugins" aria-label="Permalink to &quot;Athena.systems.plugins&quot;">​</a></h1><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h2><ul><li><a href="./server_systems_plugins_Internal">Internal</a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="addapi" tabindex="-1">addAPI <a class="header-anchor" href="#addapi" aria-label="Permalink to &quot;addAPI&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>addAPI</strong>(<code>pluginName</code>, <code>functions</code>): <code>void</code></p></div><p>Injects a &#39;plugin&#39; API into the runtime.</p><p>The runtime injection can be obtained with <code>Athena.systems.plugins.use</code>.</p><p>See that function for additional information.</p><p><strong><code>Export</code></strong></p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>pluginName</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>functions</code></td><td style="text-align:left;"><a href="./server_systems_plugins_Internal#Object"><code>Object</code></a></td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L122" target="_blank" rel="noreferrer">server/systems/plugins.ts:122</a></p><hr><h3 id="addcallback" tabindex="-1">addCallback <a class="header-anchor" href="#addcallback" aria-label="Permalink to &quot;addCallback&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>addCallback</strong>(<code>callback</code>): <code>void</code></p></div><p>After plugins are finished loading; call these callbacks. Useful for using &#39;Athena API&#39; at the top level of a document.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;"><code>Function</code></td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L85" target="_blank" rel="noreferrer">server/systems/plugins.ts:85</a></p><hr><h3 id="getplugins" tabindex="-1">getPlugins <a class="header-anchor" href="#getplugins" aria-label="Permalink to &quot;getPlugins&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>getPlugins</strong>(): <code>string</code>[]</p></div><p>Returns a list of all plugin names that are currently being loaded.</p><p><strong><code>Static</code></strong></p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code>[]</p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L73" target="_blank" rel="noreferrer">server/systems/plugins.ts:73</a></p><hr><h3 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>init</strong>(): <code>void</code></p></div><p>Loads all plugins.</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L46" target="_blank" rel="noreferrer">server/systems/plugins.ts:46</a></p><hr><h3 id="isdoneloading" tabindex="-1">isDoneLoading <a class="header-anchor" href="#isdoneloading" aria-label="Permalink to &quot;isDoneLoading&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>isDoneLoading</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p></div><p>Verifies if all plugins are done loading.</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L98" target="_blank" rel="noreferrer">server/systems/plugins.ts:98</a></p><hr><h3 id="registerplugin" tabindex="-1">registerPlugin <a class="header-anchor" href="#registerplugin" aria-label="Permalink to &quot;registerPlugin&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>registerPlugin</strong>(<code>name</code>, <code>callback</code>): <code>void</code></p></div><p>Register a callback for a plugin to begin its initialization period. This ensures that your plugin is ALWAYS loaded last.</p><p><strong><code>Static</code></strong></p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;"><code>Function</code></td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L62" target="_blank" rel="noreferrer">server/systems/plugins.ts:62</a></p><hr><h3 id="useapi" tabindex="-1">useAPI <a class="header-anchor" href="#useapi" aria-label="Permalink to &quot;useAPI&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Usage</p><p>Athena.systems.plugins.<strong>useAPI</strong>&lt;<code>K</code>&gt;(<code>apiName</code>): <code>Promise</code>&lt;<a href="./../interfaces/server_systems_plugins_Internal_ServerPluginAPI"><code>ServerPluginAPI</code></a>[<code>K</code>]&gt;</p></div><p>Used to obtain a runtime API and its valid functionality.</p><p>This makes it so you can &#39;import&#39; without knowing the plugin pathways.</p><p>As long as you know the &#39;plugin name&#39; you can import anything.</p><p><strong><code>Export</code></strong></p><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>K</code></td><td style="text-align:left;">extends <code>ExtractStringKeys</code>&lt;<a href="./../interfaces/server_systems_plugins_Internal_ServerPluginAPI"><code>ServerPluginAPI</code></a>&gt;</td></tr></tbody></table><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>apiName</code></td><td style="text-align:left;"><code>K</code></td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./../interfaces/server_systems_plugins_Internal_ServerPluginAPI"><code>ServerPluginAPI</code></a>[<code>K</code>]&gt;</p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Stuyk/altv-athena/blob/90cd63d/src/core/server/systems/plugins.ts#L143" target="_blank" rel="noreferrer">server/systems/plugins.ts:143</a></p>',77),i=[n];function l(o,d,c,h,u,p){return a(),t("div",null,i)}const b=e(r,[["render",l]]);export{m as __pageData,b as default};
